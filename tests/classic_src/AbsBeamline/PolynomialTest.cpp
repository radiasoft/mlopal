#include "gtest/gtest.h"
#include "opal_test_utilities/SilenceTest.h"
#include "AbsBeamline/MultipoleTFunctions/Polynomial.h"
#include "AbsBeamline/MultipoleTFunctions/DifferentialOperator.h"
#include "AbsBeamline/MultipoleTFunctions/RecursionRelation.h"
#include "AbsBeamline/MultipoleTFunctions/TwoPolynomial.h"
#include "AbsBeamline/MultipoleTFunctions/PolynomialSum.h"
#include "AbsBeamline/MultipoleTFunctions/DifferentialOperatorTwo.h"
#include "AbsBeamline/MultipoleTFunctions/RecursionRelationTwo.h"
#include "AbsBeamline/MultipoleTFunctions/tanhDeriv.h"
#include <vector>

TEST(PolynomialTest, Polynomial) {
    OpalTestUtilities::SilenceTest silencer;
    std::vector<int> vec1, vec2;
    for (int i = 0; i < 10; i++) {
        vec1.push_back(i);
        vec2.push_back(1);
    }
    polynomial::Polynomial poly1, poly2(vec1);
    polynomial::Polynomial poly3(poly2);
    polynomial::Polynomial poly4;
    poly4 = poly3;
    polynomial::Polynomial poly5(vec2);
    for (int i = 0; i < 10; i++) {
        EXPECT_EQ(poly1.getCoefficient(i), 0);
        EXPECT_EQ(poly2.getCoefficient(i), i);
        EXPECT_EQ(poly3.getCoefficient(i), i);
        EXPECT_EQ(poly4.getCoefficient(i), i);
        EXPECT_EQ(poly5.getCoefficient(i), 1);
    }
    poly2.differentiatePolynomial();
    poly3.multiplyPolynomial(poly1);
    poly4.addPolynomial(poly4);
    poly5.multiplyPolynomial(poly5);
    for (int i = 0; i < 9; i++) {
        EXPECT_EQ(poly1.getCoefficient(i), 0);
        EXPECT_EQ(poly2.getCoefficient(i), (i + 1) * (i + 1));
        EXPECT_EQ(poly3.getCoefficient(i), 0);
        EXPECT_EQ(poly4.getCoefficient(i), 2 * i);
        EXPECT_EQ(poly5.getCoefficient(i), i + 1);
    }
    EXPECT_EQ(poly1.getMaxXorder(), 0);
    EXPECT_EQ(poly2.getMaxXorder(), 8);
    EXPECT_EQ(poly3.getMaxXorder(), 0);
    poly3.setMaxXorder(17);
    EXPECT_EQ(poly3.getMaxXorder(), 17);
    EXPECT_EQ(poly4.getMaxXorder(), 9);
    EXPECT_EQ(poly5.getMaxXorder(), 18);
    poly2.setZero();
    EXPECT_EQ(poly2.getMaxXorder(), 0);
    poly5.truncate(5);
    EXPECT_EQ(poly5.getMaxXorder(), 5);
    EXPECT_NEAR(poly5.evaluatePolynomial(0.2), 1.56192, 1e-5);
    poly2.setCoefficient(18, 2);
    EXPECT_EQ(poly2.getCoefficient(2), 18);
    poly2.setCoefficient(7, 6);
    EXPECT_EQ(poly2.getCoefficient(6), 7);
    poly2.setCoefficient(0, 0);
    EXPECT_EQ(poly2.getCoefficient(0), 0);
}

TEST(PolynomialTest, DifferentialOperator) {
    OpalTestUtilities::SilenceTest silencer;
    std::vector<int> vec1, vec2;
    for (int i = 0; i < 2; i++) {
        vec1.push_back(i + 1);
        vec2.push_back(1);
    }
    polynomial::DifferentialOperator op1, op2(1, 1), op3(1, 1);
    polynomial::DifferentialOperator op4(op3), op5;
    op5 = op4;
    for (int i = 0; i < 2; i++) {
        EXPECT_EQ((int)op1.getXDerivatives(), 0);
        EXPECT_EQ((int)op1.getSDerivatives(), 0);
        EXPECT_EQ((int)op2.getXDerivatives(), 1);
        EXPECT_EQ((int)op2.getXDerivatives(), 1);
        EXPECT_EQ((int)op3.getXDerivatives(), 1);
        EXPECT_EQ((int)op3.getXDerivatives(), 1);
        EXPECT_EQ((int)op4.getXDerivatives(), 1);
        EXPECT_EQ((int)op4.getXDerivatives(), 1);
        EXPECT_EQ((int)op5.getXDerivatives(), 1);
        EXPECT_EQ((int)op5.getXDerivatives(), 1);
    }
    op3.resizeX(5);
    EXPECT_EQ((int)op3.getXDerivatives(), 5);
    op3.resizeS(6);
    EXPECT_EQ((int)op3.getSDerivatives(), 6);
    op2.setPolynomial(vec1, 1, 1);
    op2.setPolynomial(vec2, 0, 0);
    EXPECT_TRUE(op2.isPolynomialZero(1, 0));
    EXPECT_TRUE(op2.isPolynomialZero(0, 1));
    op2.addOperator(op2);
    EXPECT_TRUE(op2.isPolynomialZero(1, 0));
    EXPECT_TRUE(op2.isPolynomialZero(0, 1));
    op5 = op2;
    op1 = op2;
    op2.differentiateX();
    op5.doubleDifferentiateS();
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 0, 0), 2.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 0, 1), 0.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 1, 0), 2.4, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 1, 1), 4.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 1, 2), 0.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(0.2, 2, 1), 2.8, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 0, 0), 0.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 0, 1), 2.4, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 1, 0), 0.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 1, 1), 0.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 2, 1), 0.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(0.2, 1, 2), 2.8, 1e-6);
    std::vector<int> vec3;
    vec3.resize(10);
    vec3[9] = 10;
    vec3[8] = 1;
    polynomial::DifferentialOperator op6;
    op6.setPolynomial(vec3, 2, 2);
    EXPECT_NEAR(op6.evaluatePolynomial(1.2, 2, 2), 55.897620, 1e-6);
    op6.truncate(8);
    EXPECT_NEAR(op6.evaluatePolynomial(1.2, 2, 2), 4.299817, 1e-6);
}

TEST (PolynomialTest, RecursionRelation) {
    polynomial::RecursionRelation r1, r2(1, 4);
    polynomial::RecursionRelation r3(r2), r4, r5(1, 4);
    r4 = r3;
    r5.applyOperator();
    EXPECT_EQ(r1.getMaxXDerivatives(), size_t(0));
    EXPECT_EQ(r1.getMaxSDerivatives(), size_t(0));
    EXPECT_EQ(r2.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r2.getMaxSDerivatives(), size_t(1));
    EXPECT_EQ(r3.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r3.getMaxSDerivatives(), size_t(1));
    EXPECT_EQ(r4.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r4.getMaxSDerivatives(), size_t(1));
    EXPECT_EQ(r5.getMaxXDerivatives(), size_t(4));
    EXPECT_EQ(r5.getMaxSDerivatives(), size_t(2));
    EXPECT_NEAR(r4.evaluatePolynomial(0.2, 1, 0), 0.8336, 1e-6);
    r4.truncate(2);
    EXPECT_NEAR(r4.evaluatePolynomial(0.2, 1, 0), 0.84, 1e-6);
    r5.truncate(2);
    EXPECT_NEAR(r5.evaluatePolynomial(0.2, 4, 0), 1.0, 1e-6);
    r5.truncate(1);
    EXPECT_NEAR(r5.evaluatePolynomial(0.2, 2, 1), 1.2, 1e-6);
    EXPECT_TRUE(r2.isPolynomialZero(0, 0));
    EXPECT_TRUE(r2.isPolynomialZero(2, 1));
    EXPECT_TRUE(r2.isPolynomialZero(1, 1));
    r2.resizeX(4);
    EXPECT_EQ(r2.getMaxXDerivatives(), size_t(4));
    r2.resizeS(7);
    EXPECT_EQ(r2.getMaxSDerivatives(), size_t(7));
    r3.differentiateX();
    EXPECT_NEAR(r3.evaluatePolynomial(0.2, 3, 0), 1.0, 1e-6);
    EXPECT_NEAR(r3.evaluatePolynomial(0.2, 1, 1), 0.696, 1e-6);
}

TEST (PolynomialTest, TwoPolynomial) {
    std::vector<int> v1, v2, v3;
    std::vector<std::size_t> vv1, vv2, vv3;
    v1.resize(3);
    v2.resize(3);
    v3.resize(3);
    vv1.resize(3);
    vv2.resize(3);
    vv3.resize(3);
    for (int i = 0; i < 3; i++) {
        v1[i] = i + 1;
        vv1[i] = i + 1;
        v2[i] = (i + 1) * (i + 1);
        vv2[i] = (i + 1) * (i + 1);
        v3[i] = 0;
        vv3[i] = 0;
    }
    std::vector<std::vector<int>> vec1, vec2;
    polynomial::TwoPolynomial zpoly(vec1);
    EXPECT_EQ(zpoly.getMaxXorder(), size_t(0));
    EXPECT_EQ(zpoly.getMaxSorder(), size_t(0));
    EXPECT_EQ(zpoly.getCoefficient(0, 0), 0);
    vec1.resize(2);
    vec2.resize(3);
    polynomial::TwoPolynomial zpoly2(vec1);
    EXPECT_EQ(zpoly2.getMaxXorder(), size_t(0));
    EXPECT_EQ(zpoly2.getMaxSorder(), size_t(0));
    EXPECT_EQ(zpoly2.getCoefficient(0, 0), 0);
    vec1[0] = v1;
    EXPECT_THROW({polynomial::TwoPolynomial dummy(vec1);}, std::length_error);
    vec1[1] = v2;
    vec2[0] = v3;
    vec2[1] = v2;
    vec2[2] = v1;
    polynomial::TwoPolynomial poly1, poly2(vec1), poly3(vec2);
    polynomial::TwoPolynomial poly4(poly2), poly5;
    poly5 = poly3;
    EXPECT_TRUE(poly1.isZero());
    EXPECT_EQ(poly1.getCoefficient(0, 0), 0);
    EXPECT_EQ(poly2.getCoefficient(0, 0), 1);
    EXPECT_EQ(poly3.getCoefficient(0, 0), 0);
    EXPECT_EQ(poly4.getCoefficient(0, 0), 1);
    EXPECT_EQ(poly5.getCoefficient(0, 0), 0);
    EXPECT_EQ(poly1.getCoefficient(0, 1), 0);
    EXPECT_EQ(poly2.getCoefficient(0, 1), 2);
    EXPECT_EQ(poly3.getCoefficient(0, 1), 0);
    EXPECT_EQ(poly4.getCoefficient(0, 1), 2);
    EXPECT_EQ(poly5.getCoefficient(0, 1), 0);
    EXPECT_EQ(poly1.getCoefficient(1, 0), 0);
    EXPECT_EQ(poly2.getCoefficient(1, 0), 1);
    EXPECT_EQ(poly3.getCoefficient(1, 0), 1);
    EXPECT_EQ(poly4.getCoefficient(1, 0), 1);
    EXPECT_EQ(poly5.getCoefficient(1, 0), 1);
    EXPECT_EQ(poly1.getCoefficient(1, 1), 0);
    EXPECT_EQ(poly2.getCoefficient(1, 1), 4);
    EXPECT_EQ(poly3.getCoefficient(1, 1), 4);
    EXPECT_EQ(poly4.getCoefficient(1, 1), 4);
    EXPECT_EQ(poly5.getCoefficient(1, 1), 4);
    EXPECT_EQ(poly1.getCoefficient(0, 2), 0);
    EXPECT_EQ(poly2.getCoefficient(0, 2), 3);
    EXPECT_EQ(poly3.getCoefficient(0, 2), 0);
    EXPECT_EQ(poly4.getCoefficient(0, 2), 3);
    EXPECT_EQ(poly5.getCoefficient(0, 2), 0);
    EXPECT_EQ(poly1.getCoefficient(1, 2), 0);
    EXPECT_EQ(poly2.getCoefficient(1, 2), 9);
    EXPECT_EQ(poly3.getCoefficient(1, 2), 9);
    EXPECT_EQ(poly4.getCoefficient(1, 2), 9);
    EXPECT_EQ(poly5.getCoefficient(1, 2), 9);
    EXPECT_EQ(poly3.getCoefficient(2, 2), 3);
    EXPECT_EQ(poly5.getCoefficient(2, 2), 3);
    EXPECT_EQ(poly3.getCoefficient(2, 1), 2);
    EXPECT_EQ(poly5.getCoefficient(2, 1), 2);
    poly1.setCoefficient(6, 2, 0);
    EXPECT_NEAR(poly1.evaluatePolynomial(2, 0), 24.0, 1e-6);
    EXPECT_NEAR(poly1.evaluatePolynomial(0, 2), 0.0, 1e-6);
    poly1.multiplyConstant(4);
    EXPECT_NEAR(poly1.evaluatePolynomial(2, 0), 96.0, 1e-6);
    EXPECT_NEAR(poly1.evaluatePolynomial(0, 2), 0.0, 1e-6);
    poly2.multiplyPolynomial(poly1);
    EXPECT_EQ(poly2.getCoefficient(0, 0), 0);
    EXPECT_EQ(poly2.getCoefficient(2, 0), 24);
    EXPECT_EQ(poly2.getCoefficient(2, 2), 72);
    EXPECT_EQ(poly2.getCoefficient(3, 1), 96);
    EXPECT_EQ(poly2.getMaxXorder(), size_t(3));
    EXPECT_EQ(poly2.getMaxSorder(), size_t(2));
    poly2.setMaxXorder(6);
    poly2.setMaxSorder(7);
    EXPECT_EQ(poly2.getMaxXorder(), size_t(6));
    EXPECT_EQ(poly2.getMaxSorder(), size_t(7));
    EXPECT_EQ(poly3.getNdSfactors(), size_t(0));
    poly5.differentiateX();
    EXPECT_EQ(poly5.getCoefficient(0, 1), 4);
    EXPECT_EQ(poly5.getCoefficient(1, 1), 4);
    EXPECT_EQ(poly5.getCoefficient(0, 2), 9);
    EXPECT_EQ(poly5.getCoefficient(1, 0), 2);
    poly3.differentiateS();
    EXPECT_EQ(poly3.getCoefficient(0, 1), 0);
    EXPECT_EQ(poly3.getCoefficient(1, 1), 18);
    EXPECT_EQ(poly3.getCoefficient(0, 2), 0);
    EXPECT_EQ(poly3.getCoefficient(1, 0), 4);
    EXPECT_EQ(poly3.getNdSfactors(),size_t(1));
    poly3.setdSfactors(vv1);
    EXPECT_EQ(poly3.getNdSfactors(), size_t(3));
    std::vector<std::size_t> v4 = poly3.getdSfactors();
    EXPECT_EQ(v4[0], size_t(1));
    EXPECT_EQ(v4[1], size_t(2));
    EXPECT_EQ(v4[2], size_t(3));
    poly3.setZero();
    EXPECT_TRUE(poly3.isZero());
    EXPECT_NEAR(poly2.evaluatePolynomial(2, 1), 3264.0, 1e-6);
    EXPECT_NEAR(poly2.evaluatePolynomial(1, 2), 1488.0, 1e-6);
    EXPECT_NEAR(poly2.evaluatePolynomial(2, 2), 10272.0, 1e-6);
    poly2.truncate(2);
    EXPECT_NEAR(poly2.evaluatePolynomial(2, 1), 576.0, 1e-6);
    EXPECT_NEAR(poly2.evaluatePolynomial(1, 2), 408.0, 1e-6);
    EXPECT_NEAR(poly2.evaluatePolynomial(2, 2), 1632.0, 1e-6);
    polynomial::TwoPolynomial greater, smaller;
    greater.setdSfactors(vv2);
    smaller.setdSfactors(vv1);
    EXPECT_TRUE(smaller < greater);
    EXPECT_FALSE(smaller == greater);
    greater.setdSfactors(vv1);
    smaller.setdSfactors(vv3);
    EXPECT_TRUE(smaller < greater);
    EXPECT_FALSE(smaller == greater);
    greater.setdSfactors(vv2);
    smaller.setdSfactors(vv3);
    EXPECT_TRUE(smaller < greater);
    EXPECT_FALSE(smaller == greater);
    greater.setdSfactors(vv2);
    smaller.setdSfactors(vv2);
    EXPECT_FALSE(smaller < greater);
    EXPECT_TRUE(smaller == greater);
    greater.setdSfactors(vv2);
    smaller.setdSfactors(vv2);
    EXPECT_FALSE(greater < smaller);
    EXPECT_TRUE(smaller == greater);
    vv2[2] = 1000;
    greater.setdSfactors(vv2);
    EXPECT_TRUE(smaller < greater);
}

TEST (PolynomialTest, PolynomialSum) {
    std::vector<int> v1, v2, v3;
    v1.resize(3);
    v2.resize(3);
    v3.resize(3);
    for (int i = 0; i < 3; i++) {
        v1[i] = i + 1;
        v2[i] = (i + 1) * (i + 1);
        v3[i] = 0;
    }
    std::vector<std::vector<int>> vec1, vec2;
    vec1.resize(2);
    vec2.resize(3);
    vec1[0] = v1;
    vec1[1] = v2;
    vec2[0] = v3;
    vec2[1] = v2;
    vec2[2] = v1;
    polynomial::TwoPolynomial poly1, poly2(vec1), poly3(vec2);
    polynomial::TwoPolynomial poly4(poly2), poly5;
    poly5 = poly3;
    poly1.setCoefficient(6, 2, 0);
    polynomial::PolynomialSum sum1, sum2(poly2), sum3(poly3);
    polynomial::PolynomialSum sum4(sum2), sum5;
    sum5 = sum3;
    EXPECT_TRUE(sum1.isPolynomialZero(1));
    EXPECT_TRUE(sum2.isPolynomialZero(1));
    EXPECT_TRUE(sum3.isPolynomialZero(2));
    EXPECT_TRUE(sum4.isPolynomialZero(6));
    EXPECT_TRUE(sum5.isPolynomialZero(1));
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 2, 1), 34.0, 1e-6);
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 1, 2), 62.0, 1e-6);
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 2, 2), 107.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 2, 1), 52.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 1, 2), 62.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 2, 2), 158.0, 1e-6);
    sum2.differentiateX();
    sum3.differentiateS();
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 2, 1), 14.0, 1e-6);
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 1, 2), 45.0, 1e-6);
    EXPECT_NEAR(sum2.evaluatePolynomial(0, 2, 2), 45.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 2, 1), 76.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 1, 2), 54.0, 1e-6);
    EXPECT_NEAR(sum3.evaluatePolynomial(0, 2, 2), 136.0, 1e-6);
    EXPECT_EQ(sum1.numberOfTerms(), size_t(0));
    EXPECT_EQ(sum2.numberOfTerms(), size_t(1));
    EXPECT_EQ(sum3.numberOfTerms(), size_t(1));
    EXPECT_EQ(sum4.numberOfTerms(), size_t(1));
    EXPECT_EQ(sum5.numberOfTerms(), size_t(1));
    EXPECT_TRUE(sum2.isPolynomialZero(1));
    EXPECT_FALSE(sum2.isPolynomialZero(0));
    EXPECT_TRUE(sum2.isPolynomialZero(3));
    EXPECT_TRUE(sum3.isPolynomialZero(1));
    EXPECT_FALSE(sum3.isPolynomialZero(0));
    std::vector<std::size_t> v4 = sum3.getdSfactors(0);
    EXPECT_EQ(v4[0], size_t(1));
    sum3.differentiateS();
    v4 = sum3.getdSfactors(0);
    EXPECT_EQ(v4[0], size_t(2));
    v4 = sum3.getdSfactors(1);
    EXPECT_EQ(v4[0], size_t(0));
    EXPECT_EQ(v4[1], size_t(1));
    sum4.multiplyPolynomial(poly1);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 2, 1), 816.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 1, 2), 372.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 2, 2), 2568.0, 1e-6);
    sum4.truncate(2);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 2, 1), 144.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 1, 2), 102.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(0, 2, 2), 408.0, 1e-6);
    sum4.addPolynomial(sum5);
    EXPECT_EQ(sum4.numberOfTerms(), size_t(2));
    EXPECT_NEAR(sum4.evaluatePolynomial(1, 2, 1), 52.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(1, 1, 2), 62.0, 1e-6);
    EXPECT_NEAR(sum4.evaluatePolynomial(1, 2, 2), 158.0, 1e-6);
}

TEST (PolynomialTest, DifferentialOperatorTwo) {
    std::vector<double> dSvalues;
    dSvalues.resize(20, 1.0);
    std::vector<int> v1, v2, v3;
    v1.resize(3);
    v2.resize(3);
    v3.resize(3);
    for (int i = 0; i < 3; i++) {
        v1[i] = i + 1;
        v2[i] = (i + 1) * (i + 1);
        v3[i] = 0;
    }
    std::vector<std::vector<int>> vec1, vec2;
    vec1.resize(2);
    vec2.resize(3);
    vec1[0] = v1;
    vec1[1] = v2;
    vec2[0] = v3;
    vec2[1] = v2;
    vec2[2] = v1;
    polynomial::TwoPolynomial poly1, poly2(vec1), poly3(vec2);
    polynomial::TwoPolynomial poly4(poly2), poly5;
    poly5 = poly3;
    poly1.setCoefficient(6, 2, 0);
    polynomial::PolynomialSum sum1, sum2(poly2), sum3(poly3);
    polynomial::PolynomialSum sum4(sum2), sum5;
    sum5 = sum3;
    polynomial::DifferentialOperatorTwo op1, op2(1, 1), op3(1, 1);
    polynomial::DifferentialOperatorTwo op4(op3), op5;
    op5 = op4;
    for (int i = 0; i < 2; i++) {
        EXPECT_EQ(op1.getXDerivatives(), size_t(0));
        EXPECT_EQ(op1.getSDerivatives(), size_t(0));
        EXPECT_EQ(op2.getXDerivatives(), size_t(1));
        EXPECT_EQ(op2.getXDerivatives(), size_t(1));
        EXPECT_EQ(op3.getXDerivatives(), size_t(1));
        EXPECT_EQ(op3.getXDerivatives(), size_t(1));
        EXPECT_EQ(op4.getXDerivatives(), size_t(1));
        EXPECT_EQ(op4.getXDerivatives(), size_t(1));
        EXPECT_EQ(op5.getXDerivatives(), size_t(1));
        EXPECT_EQ(op5.getXDerivatives(), size_t(1));
    }
    op3.resizeX(5);
    EXPECT_EQ(op3.getXDerivatives(), size_t(5));
    op3.resizeS(6);
    EXPECT_EQ(op3.getSDerivatives(), size_t(6));
    op2.setPolynomial(poly2, 1, 1);
    op2.setPolynomial(poly3, 0, 0);
    op3.setPolynomial(poly3, 1, 1);
    op3.setPolynomial(poly2, 0, 0);
    op4.setPolynomial(poly3, 1, 0);
    op4.setPolynomial(poly2, 0, 1);
    op5.setPolynomial(poly3, 1, 1);
    op5.setPolynomial(poly2, 0, 0);
    EXPECT_TRUE(op2.isPolynomialZero(1, 0, 0));
    EXPECT_TRUE(op2.isPolynomialZero(0, 1, 0));
    EXPECT_EQ(op2.numberOfTerms(0, 0), size_t(1));
    EXPECT_EQ(op2.numberOfTerms(0, 1), size_t(0));
    EXPECT_EQ(op2.numberOfTerms(1, 0), size_t(0));
    EXPECT_EQ(op2.numberOfTerms(1, 1), size_t(1));
    EXPECT_NEAR(op2.evaluatePolynomial(2, 1, 0, 0, dSvalues), 52.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(1, 2, 0, 0, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 2, 0, 0, dSvalues), 158.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 1, 1, 1, dSvalues), 34.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(1, 2, 1, 1, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 2, 1, 1, dSvalues), 107.0, 1e-6);
    op2.differentiateX();
    op3.differentiateS();
    EXPECT_NEAR(op2.evaluatePolynomial(2, 1, 0, 0, dSvalues), 38.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(1, 2, 0, 0, dSvalues), 79.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 2, 0, 0, dSvalues), 113.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 1, 1, 1, dSvalues), 14.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(1, 2, 1, 1, dSvalues), 45.0, 1e-6);
    EXPECT_NEAR(op2.evaluatePolynomial(2, 2, 1, 1, dSvalues), 45.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(2, 1, 0, 0, dSvalues), 52.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(1, 2, 0, 0, dSvalues), 54.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(2, 2, 0, 0, dSvalues), 94.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(2, 1, 1, 1, dSvalues), 76.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(1, 2, 1, 1, dSvalues), 54.0, 1e-6);
    EXPECT_NEAR(op3.evaluatePolynomial(2, 2, 1, 1, dSvalues), 136.0, 1e-6);
    op3.differentiateS();
    EXPECT_EQ(op3.numberOfTerms(0, 0), size_t(2));
    EXPECT_EQ(op3.numberOfTerms(0, 1), size_t(2));
    EXPECT_EQ(op3.numberOfTerms(1, 0), size_t(0));
    EXPECT_EQ(op3.numberOfTerms(1, 1), size_t(2));
    std::vector<std::size_t> v4 = op3.getdSFactors(0, 0, 0);
    EXPECT_EQ(v4[0], size_t(2));
    v4 = op3.getdSFactors(0, 0, 1);
    EXPECT_EQ(v4[0], size_t(0));
    EXPECT_EQ(v4[1], size_t(1));
    v4 = op3.getdSFactors(0, 1, 0);
    EXPECT_EQ(v4[0], size_t(1));
    op5.addOperator(op4);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 1, 0, dSvalues), 52.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 1, 0, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 1, 0, dSvalues), 158.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 0, 1, dSvalues), 34.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 0, 1, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 0, 1, dSvalues), 107.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(2, 1, 1, 1, dSvalues), 52.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(1, 2, 1, 1, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(2, 2, 1, 1, dSvalues), 158.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(2, 1, 0, 0, dSvalues), 34.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(1, 2, 0, 0, dSvalues), 62.0, 1e-6);
    EXPECT_NEAR(op5.evaluatePolynomial(2, 2, 0, 0, dSvalues), 107.0, 1e-6);
    op4.multiplyPolynomial(poly1);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 0, 1, dSvalues), 816.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 0, 1, dSvalues), 372.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 0, 1, dSvalues), 2568.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 1, 0, dSvalues), 1248.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 1, 0, dSvalues), 372.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 1, 0, dSvalues), 3792.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 0, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 0, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 0, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 1, 1, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 1, 1, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 1, 1, dSvalues), 0.0, 1e-6);
    op4.truncate(2);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 0, 1, dSvalues), 144.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 0, 1, dSvalues), 102.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 0, 1, dSvalues), 408.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 1, 1, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(1, 2, 1, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(op4.evaluatePolynomial(2, 2, 1, 0, dSvalues), 0.0, 1e-6);
}

TEST (PolynomialTest, RecursionRelationTwo) {
    std::vector<double> dSvalues;
    dSvalues.resize(20, 1.0);
    polynomial::RecursionRelationTwo r1, r2(1, 4);
    polynomial::RecursionRelationTwo r3(r2), r4, r5(1, 4);
    r4 = r3;
    r5.applyOperator();
    EXPECT_EQ(r1.getMaxXDerivatives(), size_t(0));
    EXPECT_EQ(r1.getMaxSDerivatives(), size_t(0));
    EXPECT_EQ(r2.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r2.getMaxSDerivatives(), size_t(2));
    EXPECT_EQ(r3.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r3.getMaxSDerivatives(), size_t(2));
    EXPECT_EQ(r4.getMaxXDerivatives(), size_t(2));
    EXPECT_EQ(r4.getMaxSDerivatives(), size_t(2));
    EXPECT_EQ(r5.getMaxXDerivatives(), size_t(4));
    EXPECT_EQ(r5.getMaxSDerivatives(), size_t(4));
    r4.truncate(4);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 0, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 1, 0, dSvalues), 11.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 0, 1, dSvalues), 122.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 1, 1, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 2, 0, dSvalues), 1.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 0, 2, dSvalues), 57.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 1, 2, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(2, 1, 2, 1, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 0, 0, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 1, 0, dSvalues), 22.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 0, 1, dSvalues), 61.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 1, 1, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 2, 0, dSvalues), 1.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 0, 2, dSvalues), 57.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 1, 2, dSvalues), 0.0, 1e-6);
    EXPECT_NEAR(r4.evaluatePolynomial(1, 2, 2, 1, dSvalues), 0.0, 1e-6);
    std::vector<std::size_t> v4 = r4.getdSfactors(2, 0, 0);
    EXPECT_EQ(v4.size(), size_t(0));
    v4 = r4.getdSfactors(0, 1, 0);
    EXPECT_EQ(v4.size(), size_t(1));
    EXPECT_EQ(v4[0], size_t(1));
    r4.truncate(2);
    EXPECT_NEAR(r4.evaluatePolynomial(0.2, 1, 1, 0, dSvalues), 0.84, 1e-6);
    r5.truncate(2);
    EXPECT_NEAR(r5.evaluatePolynomial(0.2, 1, 4, 0, dSvalues), 1.0, 1e-6);
    r5.truncate(1);
    EXPECT_NEAR(r5.evaluatePolynomial(0.2, 1, 2, 2, dSvalues), 1.2, 1e-6);
    EXPECT_TRUE(r2.isPolynomialZero(0, 0, 0));
    EXPECT_TRUE(r2.isPolynomialZero(2, 1, 0));
    EXPECT_TRUE(r2.isPolynomialZero(1, 1, 0));
    r2.resizeX(4);
    EXPECT_EQ(r2.getMaxXDerivatives(), size_t(4));
    r2.resizeS(7);
    EXPECT_EQ(r2.getMaxSDerivatives(), size_t(7));
    r3.differentiateX();
    EXPECT_NEAR(r3.evaluatePolynomial(0.2, 1, 3, 0, dSvalues), 1.0, 1e-6);
    EXPECT_NEAR(r3.evaluatePolynomial(0.2, 1, 1, 2, dSvalues), 0.696, 1e-6);
    EXPECT_NEAR(r3.evaluatePolynomial(1, 0.2, 1, 2, dSvalues), 0.696, 1e-6);
    r4.differentiateS();
    EXPECT_EQ(r4.numberOfTerms(0, 1), size_t(3));
}

TEST (PolynomialTest, TanhDeriv) {
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 2), -0.0148895, 1e-7);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 3), -0.0991297, 1e-7);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 4), -0.659093, 1e-6);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 5), -4.37031, 1e-5);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 6), -28.8209, 1e-4);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 7), -187.956, 1e-3);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 8), -1197.48, 1e-2);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 9), -7246.6, 1e-1);
    EXPECT_NEAR(tanhderiv::integrate(1.0, 2.2, 0.3, 0.3, 10), -38575, 1e0);
}
