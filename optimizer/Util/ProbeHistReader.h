//
// Class ProbeHistReader
//   Implements a parser and value extractor for hist files (*.hist).
//   It is for example used together with the septum objective.
//   A histogram file is generated by the OPAL probe element.
//
// Copyright (c) 2019, Matthias Frey, Paul Scherrer Institut, Villigen PSI, Switzerland
// All rights reserved
//
// Implemented as part of the PhD thesis
// "Precise Simulations of Multibunches in High Intensity Cyclotrons"
//
// This file is part of OPAL.
//
// OPAL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// You should have received a copy of the GNU General Public License
// along with OPAL. If not, see <https://www.gnu.org/licenses/>.
//
#ifndef __PROBE_HIST_READER_H__
#define __PROBE_HIST_READER_H__

#include <fstream>
#include <sstream>
#include <string>
#include <vector>

class ProbeHistReader {

public:
    typedef std::vector<size_t> container_t;

    ProbeHistReader(std::string filename);

    void parseFile();

    /**
     * @param lower radius [mm]
     * @param upper radius [mm]
     */
    size_t minimum(double lower, double upper);

private:
    void parseHeader(std::ifstream& ifs);

    template <typename T>
    T getValue(const std::string& s);

    /// Histogram file
    std::string filename_m;

    double rmin_m;          // start radius of probe in mm
    double binwidth_m;      // size of each bin in mm

    container_t bincount_m;
};


template <typename T>
T ProbeHistReader::getValue(const std::string& s) {
    std::istringstream ss(s);
    T res;
    ss >> res;
    return res;
}

#endif
